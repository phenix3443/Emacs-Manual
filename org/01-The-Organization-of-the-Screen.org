# -*- coding:utf-8-*-
#+TITLE: 1 The Organization of the Screen
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com
#+STARTUP: overview
#+OPTIONS: num:nil
* 1 The Organization of the Screen
** 1.3 The Mode Line

   At the bottom of each window is a "mode line", which describes what is going on in the current buffer.  When there is only one window, the mode line appears right above the echo area; it is the next-to-last line in the frame.  On a graphical display, the mode line is drawn with a 3D box appearance.  Emacs also usually draws the mode line of the selected window with a different color than that of unselected windows, in order to make it stand out.

   每个 window 底部都是一个“模式行”，它描述了当前 buffer 正在发生的事情。只有一个 window 的时候，模式行正好处于回显区上方，是 frame 中的倒数第二行。图形化显示中，模式行显示为一个 3D 盒子外观。Emacs 中被选中 window 的模式行通常与没有被选中的颜色不同，为了凸显其不同。

   The text displayed in the mode line has the following format:

   模式行中显示的文本具有以下格式：

   #+BEGIN_EXAMPLE
CS:CH-FR  BUF      POS LINE   (MAJOR MINOR)
   #+END_EXAMPLE


   On a text terminal, this text is followed by a series of dashes extending to the right edge of the window.  These dashes are omitted on a graphical display.

   在文本终端，这些文本紧随其后的是一系列直到 window 右边缘的的破折号。图形显示省略了这些破折号。

   The CS string and the colon character after it describe the character set and newline convention used for the current buffer.  Normally, Emacs automatically handles these settings for you, but it is sometimes useful to have this information.

   CS 字符字符串以后紧随其后的冒号描述当前 buffer 的字符集以及换行约定。通常，Emacs 自动处理这些，但有时这些信息也是游泳。

   CS describes the character set of the text in the buffer (*noteCoding Systems::).  If it is a dash (‘-’), that indicates no special character set handling (with the possible exception of end-of-line conventions, described in the next paragraph).  ‘=’ means no conversion whatsoever, and is usually used for files containing non-textual data. Other characters represent various "coding systems"—for example, ‘1’represents ISO Latin-1.

   CS 描述了 buffer 中文本的字符集及。如果它是一个破折号(‘-’)，表示没有特殊字符集处理（可能有下段描述的的行尾约定）。‘=’表示没有任何转换，通常用于包含非文本数据的文件。其他字符代表不同的“编码系统”---例如，‘1’表示 ISO Latin-1。

   On a text terminal, CS is preceded by two additional characters that describe the coding systems for keyboard input and terminal output. Furthermore, if you are using an input method, CS is preceded by a string that identifies the input method (*note Input Methods::).

   文本终端，CS 前面有两个额外的字符描述键盘输入和终端输出的编码系统。此外，如果使用输入法，CS 前面还有标识输入法的字符串。

   The character after CS is usually a colon.  If a different string is displayed, that indicates a nontrivial end-of-line convention for encoding a file.  Usually, lines of text are separated by "newline characters" in a file, but two other conventions are sometimes used. The MS-DOS convention uses a “carriage-return” character followed by a “linefeed” character; when editing such files, the colon changes to either a backslash (‘\’) or ‘(DOS)’, depending on the operating system. Another convention, employed by older Macintosh systems, uses a “carriage-return” character instead of a newline; when editing such files, the colon changes to either a forward slash (‘/’) or ‘(Mac)’.  On some systems, Emacs displays ‘(Unix)’ instead of the colon for files that use newline as the line separator.

   CS 之后的字符通常是冒号，如果是不同搞得字符串，表示编码文件用了一个异常的行尾转换。通常，我呢见中文本行使用“换行符”分割，但有时还使用另外两种哦约定。MS-DOS 转行使用“回车”紧跟一个换行符；编辑此类文件，冒号变为反斜杠(‘\’) 或‘(DOS)’，这取决于操作系统。另一个是旧的 Mac'系统使用的约定，使用一个“回车”而不是或换行符；编辑此类文件，冒号变为(‘/’) or ‘(Mac)’。一些系统中，使用换行作为行分隔符的文件，Emacs 显示‘（unix）’而不是冒号。

   The next element on the mode line is the string indicated by CH. This shows two dashes (‘--’) if the buffer displayed in the window has the same contents as the corresponding file on the disk; i.e., if the buffer is “unmodified”.  If the buffer is modified, it shows two stars (‘**’).  For a read-only buffer, it shows ‘%*’ if the buffer is modified, and ‘%%’ otherwise.

   模式行中的下一个元素是 CH 指示的字符串。如果 window 中显示的 buffer 内容和磁盘文件内容一致的话，它显示两个破折号 (‘--’) ，比如，没有修改 buffer。如果修改了 buffer，它显示两个星号(‘**’)。对于只读 buffer，如果 buffer 没有修改，显示‘%*’，否则显示‘%%’。

   The character after CH is normally a dash (‘-’).  However, if the default-directory for the current buffer is on a remote machine, ‘@’ is displayed instead (*note File Names::).

   通常 CH 之后的字符是一个破折号 (‘-’)。然而，如果当前 buffer 的默认目录在远程机器上，则显示为‘@’。

   FR gives the selected frame name (*note Frames::).  It appears only on text terminals.  The initial frame’s name is ‘F1’.

   FR 给出了选中的的 frame 名字。只出现在文本终端中。初始的 frame 名字是‘F1’。

   BUF is the name of the buffer displayed in the window.  Usually, this is the same as the name of a file you are editing.  *Note Buffers::.

   BUF 是 window 中显示的 buffer 的名字。通常它和正在编辑的文件同名。

   POS tells you whether there is additional text above the top of the window, or below the bottom.  If your buffer is small and all of it is visible in the window, POS is ‘All’.  Otherwise, it is ‘Top’ if you are looking at the beginning of the buffer, ‘Bot’ if you are looking at the end of the buffer, or ‘NN%’, where NN is the percentage of the buffer above the top of the window.  With Size Indication mode, you can display the size of the buffer as well.  *Note Optional Mode Line::.

   POS 告诉 window 区域之外是否还有额外的文本。如果 buffer 很小,所有内容都在 window 中，POS 显示为‘ALL’。否则，如果正在查看 buffer 开始，它显示为‘Top’，正在查看 buffer 结尾，它显示为‘Bot’，或者显示为‘NN%’，NN 表示 window 顶部之上内容的百分比。使用 Size Indication mode，还可以显示 buffer 的大小。

   LINE is the character ‘L’ followed by the line number at point.  (You can display the current column number too, by turning on Column Number mode.  *Note Optional Mode Line::.)

   LINE 表示当前 point 处的行号（开启 Column Number mode 也可以显示列号）。

   MAJOR is the name of the "major mode" used in the buffer.  A major mode is a principal editing mode for the buffer, such as Text mode, Lisp mode, C mode, and so forth.  *Note Major Modes::.  Some major modes display additional information after the major mode name.  For example, Compilation buffers and Shell buffers display the status of the subprocess.

   MAJOR 是 buffer 中使用的“主模式”。主模式是 buffer 的主要编辑模式，比如 Text mode，Lisp mode，C mode 等等。一些主模式会在主模式名后显示额外的信息。比如，Compilation buffer 和 Shell buffers 显示当前子进程的状态。

   MINOR is a list of some of the enabled "minor modes", which are optional editing modes that provide additional features on top of the major mode.  *Note Minor Modes::.

   MINOR 是一些开启的“辅助模式”的列表，这些可选的编辑模式在主模式之上提供额外的功能。

   Some features are listed together with the minor modes whenever they are turned on, even though they are not really minor modes.  ‘Narrow’ means that the buffer being displayed has editing restricted to only a portion of its text (*note Narrowing::).  ‘Def’ means that a keyboard macro is currently being defined (*note Keyboard Macros::).

   一些功能不管何时开启，也会和辅助模式一起列出来，即使它们并不是真正的辅助模式。‘Narrow’以为这显示的 buffer 正在编辑它文本中受限的一部分。‘Def’表示一个当前定义的按键宏。

   In addition, if Emacs is inside a recursive editing level, square brackets (‘[…]’) appear around the parentheses that surround the modes. If Emacs is in one recursive editing level within another, double square brackets appear, and so on.  Since recursive editing levels affect Emacs globally, such square brackets appear in the mode line of every window. *Note Recursive Edit::.

   此外，如果 Emacs 处于递归编辑，中括号(‘[…]’) 会包围小括号，小括号包围了这些模式。如果 Emacs 处于另一个另一个递归编辑，会出现连个嵌套的中括号，以此类推。因为递归编辑全局影响 Emacs，这样的中括号会出现在每个 window 的模式行。

   You can change the appearance of the mode line as well as the format of its contents.  *Note Optional Mode Line::.  In addition, the mode line is mouse-sensitive; clicking on different parts of the mode line performs various commands.  *Note Mode Line Mouse::.

   可以修改模式行的外观以及它内容的格式。此外，模式行也可以使用鼠标，点击模式行不同的部分执行不同的命令。

** 1.4 The Menu Bar

   Each Emacs frame normally has a "menu bar" at the top which you can use to perform common operations.  There’s no need to list them here, as you can more easily see them yourself.

   通常每个 Emacs Frame 在顶部有一个可以用来执行常见操作的菜单栏。没必要在这里列出来，可以很容易看到它们。

   On a display that supports a mouse, you can use the mouse to choose a command from the menu bar.  An arrow on the right edge of a menu item means it leads to a subsidiary menu, or "submenu".  A ‘...’ at the end of a menu item means that the command will prompt you for further input before it actually does anything.

   在支持鼠标的显示中，可以使用鼠标从菜单栏选择命令。菜单项右侧出现的箭头意味着它还有子菜单，菜单项底部的“...”意味着命令执行前会提示进一步的输入。

   Some of the commands in the menu bar have ordinary key bindings as well; if so, a key binding is shown in parentheses after the item itself.  To view the full command name and documentation for a menu item, type ‘C-h k’, and then select the menu bar with the mouse in the
usual way (*note Key Help::).

   菜单栏中的一些命令也有常见的键绑定；如果是这样，键绑定会显示在菜单项右侧的括号中。使用‘C-h k’查看菜单项的完整命令名字和文档，然后使用鼠标选择菜单栏。

   Instead of using the mouse, you can also invoke the first menu bar item by pressing <F10> (to run the command ‘menu-bar-open’).  You can then navigate the menus with the arrow keys.  To activate a selected menu item, press <RET>; to cancel menu navigation, press ‘C-g’ or ‘<ESC> <ESC> <ESC>’.

   除了使用鼠标，还可以按下<F10>来调用菜单栏第一个条目（使用‘menu-bar-open’运行命令）。然后可以使用方向键浏览菜单。按下<RET>激活选中的菜单，按下‘C-g’ 或 ‘<ESC> <ESC> <ESC>’取消菜单浏览。

   On a text terminal, you can optionally access the menu-bar menus in the echo area.  To this end, customize the variable ‘tty-menu-open-use-tmm’ to a non-‘nil’ value.  Then typing <F10> will run the command ‘tmm-menubar’ instead of dropping down the menu.  (You can also type ‘M-`’, which always invokes ‘tmm-menubar’.)  ‘tmm-menubar’lets you select a menu item with the keyboard.  A provisional choice appears in the echo area.  You can use the up and down arrow keys to move through the menu to different items, and then you can type <RET> to select the item.  Each menu item is also designated by a letter or digit (usually the initial of some word in the item’s name).  This letter or digit is separated from the item name by ‘==>’.  You can type the item’s letter or digit to select the item.

   在文本中断，可以选择在回显区访问菜单栏项目。为此，将变量‘tty-menu-open-use-tmm’赋值为非 nil 值。然后按下<F10>将会运行命令‘tmm-menubar’而不是陷入到菜单中。（也可以输入‘M-`’，它总是调用‘tmm-menubar’。）使用‘tmm-menubar’可以使用键盘选择菜单项。回显区会出现一个临时选择。可以使用上下箭头选择菜单中不同的项目，然后按下<RET>选中菜单项。为每个菜单项设置了一个字母或数字（通常是菜单项名字的首字母）。该字母或数字与菜单项名字使用‘==>’分割。可以键入菜单项的字母或数字来选中它。
