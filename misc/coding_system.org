我们经常遇到的一个问题是各种字符编码之间转换，比如UTF、GBK、ASCII等等，它们也被称为编码系统、字符集，今天我们就说一下Emacs中的编码系统、字符集。
首先，先解决实际中容易遇到的几个问题：
如何查看打开文本的字符编码
如何以指定编码打开文件
如何以指定编码保存文件

* 22 国际字符集支持
** 22.1 国际字符集简介
Emacs支持种类繁多的字节编码，包括UTF、Latin、GBK等等，而内部使用的它自己的字符编码，在打开和保存文件等操作的时候能够自动与外部字符集进行转换。
C-x <RET> 作为多字节字符、编码系统、输入法相关命令的前缀。
** 22.2 关闭多字符集
默认情况下，Emacs以多字节模式启动，但是有时候可能需要关闭这个功能。可以通过命令find-file-literally来达到这个效果。
选择一个正确的语言环境是重要的，因为会影响到各种变量的默认值。简单的来说，一种语言环境说明了解释语言的脚本，而不仅仅是语言本身。
** 22.3 语言环境
有些系统通过修改变量 LC_ALL, LC_CTYPE, or LANG能指定字符集区域，启动过程中，Emacs在系统区域别名表中查询字符集的区域名字，用它的标准名称和变量local-charset-language-names和local-language-names（前者会覆盖后者）中的实体进行对比，如果有符合的就建立相应的语言环境。同时也会调整显示表和终端编码系统、区域编码系统和有限编码系统。启动的时候通过命令set-language-environment可以改变语言环境。

** 22.4 输入法
最简单的输入法方案是将ASCII编码和特殊字符进行对应，Russian就是这么干的，有时候还可以使用几个字符组合起来形成有音标的字母。但是中文和日文需要更复杂的输入法，中文有拼音和五笔两种输入法，一种输入序列可能对应几个可能的中文字符，通过C-f C-b C-p C-n或者小键盘的数字键可以选择想要的那些字符。在使用中文输入法的时候，<TAB>会显示一个包含所有候选字符的buff。

** 22.5 选择一个输入法
和输入法有关的命令
| key binding                            | description                                                               |
|----------------------------------------+---------------------------------------------------------------------------|
| C-\                                    | Enable or disable use of the selected input method (toggle-input-method). |
|----------------------------------------+---------------------------------------------------------------------------|
| C-x <RET> C-\ method <RET>             | Select a new input method for the current buffer (set-input-method).      |
|----------------------------------------+---------------------------------------------------------------------------|
| C-h I method <RET>C-h C-\ method <RET> |                                                                           |
|----------------------------------------+---------------------------------------------------------------------------|
| M-x list-input-methods                 | Display a list of all the supported input methods.                        |
|----------------------------------------+---------------------------------------------------------------------------|

** 22.6 编码系统
每个编码系统有三个变种，分别对应UNIX dos mac三种系统的行尾结束符。不要对行尾进行任何转换，让Emacs决定如何处理行尾。如果仅仅编辑文件但不进行任何转换，最简单的方式是使用find-file-literally命令。

和编码系统有关的常用的命令

| key binding             | desciption                                              |
|-------------------------+---------------------------------------------------------|
| C-h C coding <RET>      | Describe coding system coding (describe-coding-system). |
|-------------------------+---------------------------------------------------------|
| C-h C <RET>             | Describe the coding systems currently in use.           |
|-------------------------+---------------------------------------------------------|
| M-x list-coding-systems | Display a list of all the supported coding systems.     |
|-------------------------+---------------------------------------------------------|

** 22.7 识别编码系统
Emacs在读取文本的时候都会尝试选择一个合适的编码系统，但是有时候并不是那么好区分，比如Latin1和latin2。这种情况下，Emacs通过编码系统的优先级列表来进行判断。这个优先级列表和选择的语言环境有关。这也是指定语言环境的原因。然而，通过prefer-coding-system命令也可以指定列表优先级。
有时候文件名也能说明应该采用哪种编码系统，变量file-coding-system-alist中指明了这种对应关系。变量auto-coding-alist和auto-coding-regexp-alist是指明文件名与编码系统对应的最强力的手段，也就是说这两变量最终决定了对应关系。
还有一种方式使用变量auto-codign-function。例如内建的该函数能够编码XML文件。

** 22.8 指定文件的编码系统
如果Emacs错误不能正确识别文本的编码方式，可以通过C-x <RET> r (revert-buffer-with-coding-system)来手动指定。
也可以在文件头部使用‘-*-...-*-’来指定编码方式或者在文件尾部设置特殊的变量。

** 22.9 为输出选择编码系统
通过 set-buffer-file-coding-system 来给文件指定输出的编码格式。
** 22.10 为文件指定编码系统
相关命令

| key biding                                      | description                                                                                                 |
|-------------------------------------------------+-------------------------------------------------------------------------------------------------------------|
| C-x <RET> f coding <RET>                        | Use coding system coding to save or revisit the file in the current buffer (set-buffer-file-coding-system). |
|-------------------------------------------------+-------------------------------------------------------------------------------------------------------------|
| C-x <RET> c coding <RET>                        | Specify coding system coding for the immediately following command (universal-coding-system-argument).      |
|-------------------------------------------------+-------------------------------------------------------------------------------------------------------------|
| C-x <RET> r coding <RET>                        | Revisit the current file using the coding system coding (revert-buffer-with-coding-system).                 |
|-------------------------------------------------+-------------------------------------------------------------------------------------------------------------|
| M-x recode-region <RET> right <RET> wrong <RET> | Convert a region that was decoded using coding system wrong, decoding it using coding system right instead. |
|-------------------------------------------------+-------------------------------------------------------------------------------------------------------------|

** 22.11 程序间的编码系统

** 22.12 文件名的编码系统

** 22.13 终端I/O的编码系统

** 22.14 字体集
字体定义了字符的显示形状，因而，完全支持Emacs中的字符就需要一个包含很多字体集的字体集。字体集包含一系列的字体规范，每种字体规范处理一定范围的字体编码，该规范不能处理的由剩余规范进行处理。


如同字体一样，字体集也有名字。不同的是，字体存储在系统中，系统定义了可用字体的名字，而字体集是由Emacs自己定义的。一旦定义了一个字体集，就可以在Emacs内部任何需要字体的地方通过名字使用它。当然，Emacs中的字体集只能使用系统支持的字体。

Emacs自动创建了三个字体集：标准字体集，启动字体集和默认字体集。默认字体集更多是用来包含用来显示非ASCII的字体，作为其他两种字体集的备用。然后，默认字体集并没有指定字体集的名字，所以如果直接使用的话可能随机选用一个字体。在Emacs启动的时候可以通过fn参数来指定要使用的字体集。

如果启动的时候没有指定字体集的话，Emacs使用ASCII字体，并用默认字体集作为备用。表中字体集只有在明确指明需要它的时候才使用。

一个字体集没必要针对所有的字符都指定对应的字体集，那些不能显示的字符会显示为16进制符号或者一个空格或者空盒子，到时候在处理也不迟。

** 22.15 定义字体集
Emacs 根据一个变量的值来创建标准字符集，X窗口系统对应的变量是是standard-fontset-spec，GNUstep 或 Mac OS X 对应的变量是ns-standard-fontset-spec，MS Windows 对应的变量是 w32-stand-fontset-spec。

Emacs根据默认字体的ASCII字体会自动产生启动字体集，该ASCII字符集可能来自“Font“资源、 -fn参数或者Emacs启动的时候找到的默认字体 。

启动字体集将会用你指定的字体或它的变种来显示它所能支持的字符，如果有不能显示的字符就用default-font-set来显示。

在linux系统中通过在x 资源中定义字体集可以控制Emacs的字体显示。

** 22.16 修改字体集
